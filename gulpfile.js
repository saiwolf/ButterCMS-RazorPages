/// <binding Clean='clean' ProjectOpened='watchFiles' />
/*
 * Define plugins for use
 */
const gulp = require('gulp');
const autoPrefixer = require('gulp-autoprefixer');
const gulpSass = require('gulp-sass');
const concat = require('gulp-concat');
const uglify = require('gulp-uglify-es').default;
const cleanCss = require('gulp-clean-css');
//const sourceMaps = require('gulp-sourcemaps');
const del = require('del');
const header = require('gulp-header');

/*
 * Banner for auto-generated bundle files. 
 */
var banner = ['/**',
    ' * ',
    ' * DO NOT EDIT THIS FILE.',
    ' * IT IS AUTO-GENERATED AND YOUR CHANGES WILL BE LOST!',
    ' * ',
    ' */',
    '', ''].join('\n');

/* 
 * Location of all css files to pass to `combineCss`
 * Excludes: `wwwroot/css/bundle.min.css`
 */
const configCss = {
    src: ['wwwroot/css/site.css', '!wwwroot/css/site.min.css']
}

/* 
 * Location of all js files to pass to `combineJs()`
 * Excludes: `wwwroot/js/bundle.min.js`
 */
const configJs = {
    src: ['wwwroot/js/site.js', '!wwwroot/js/site.min.js']
}

/*
 * Compile Sass files specified
 * into their css equivalents, then run them through
 * AutoPrefixer before copying them to `wwwroot/css`
 * as a bundled file: `site.css`
 */
function compileSass() {
    return gulp
        .src(['Stylesheets/**/*.scss'])
        .pipe(gulpSass({ outputStyle: "expanded" }))
        .pipe(autoPrefixer({
            overrideBrowserslist: ['last 2 versions'],
            cascade: false
        }))
        .pipe(concat('site.css'))
        .pipe(header(banner))
        .pipe(gulp.dest('./wwwroot/css/'));
}
/*
 * Bundle all CSS files (excluding bundle.min.css if it exists)
 * in the `wwwroot/css` directory, then generate sourcemaps and
 * run the produced `bundle.min.css' through cssClean for minification,
 * before copying `bundle.min.css` to `wwwroot/css`.
 */
function combineCss() {
    return gulp
        .src(configCss.src)
        .pipe(concat('site.min.css'))
        .pipe(cleanCss({
            debug: true
        }, (details) => {
            console.log(`${details.name}: ${details.stats.originalSize}`);
            console.log(`${details.name}: ${details.stats.minifiedSize}`);
        }))
        .pipe(header(banner))
        .pipe(gulp.dest('./wwwroot/css/'));
}

/*
 * Combine and uglify/minify all .js files inside
 * `Scripts/` and place the resulting `bundle.min.js`
 * in `wwwroot/js`
 */
function compileJs() {
    return gulp
        .src(['Scripts/**/*.js'])
        .pipe(concat('site.js'))
        .pipe(header(banner))
        .pipe(gulp.dest('./wwwroot/js/'));
}

/*
 * Bundle all JS files specified by const `configJs` (excluding bundle.min.js if it exists),
 * then generate sourcemaps and run the produced `bundle.min.css'
 * through cssClean for minification, before copying `bundle.min.css` to `wwwroot/css`.
 */
function combineJs() {
    return gulp
        .src(configJs.src)
        .pipe(concat('site.min.js'))
        .pipe(uglify())
        .pipe(header(banner))
        .pipe(gulp.dest('./wwwroot/js/'))
}


/* 
 * Cleans all bundled css and js files.
 * USE WITH CAUTION
 */
function clean() {
    return del(['./wwwroot/css/site.min.css', './wwwroot/js/site.min.js']);
}

/*
 * Watch specified directories for changes, then
 * execute specified function.
 */
function watchFiles() {
    gulp.watch('Stylesheets/**/*.scss', compileSass);
    gulp.watch('Scripts/**/*.js', compileJs);
}

/*
 * Export tasks defined above for use
 */
exports.compileSass = compileSass;
exports.combineCss = combineCss;
exports.compileJs = compileJs
exports.combineJs = combineJs;
exports.clean = clean;
exports.watchFiles = watchFiles;